{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"What is Filelib","text":"<p>Filelib is truly resumable file uploader that supports multiple storage options:</p> <ol> <li>AWS S3</li> <li>Digital Ocean Spaces</li> <li>Google Cloud Storage (Currently in development)</li> <li>Azure Blob Storage (Currently in development)</li> </ol>"},{"location":"#what-is-truly-resumable","title":"What is truly resumable?","text":"<p>Truly resumable upload means that when an already in-progress  upload gets interrupted for any reason and a user uploads  the same file again, the file upload continues where it  left off instead starting from the beginning.</p>"},{"location":"getting_started/authentication/","title":"Authentication Credentials","text":"<p>Filelib API requires all incoming requests to be authenticated.</p> <p>Filelib API uses JWT to authenticate a consumer(you as a client) and our Python SDK  provides functionality to help you authenticate your requests.</p> <p>To do that, SDK requires Authentication Credentials.</p>"},{"location":"getting_started/authentication/#how-to-acquire-authentication-credentials","title":"How to acquire Authentication Credentials","text":"<p>After you create an account on Filelib.com, go over to https://filelib.com/dashboard/credentials</p> <p>There you can generate your first set of credentials that you can use within SDK.</p>"},{"location":"getting_started/installation/","title":"Getting Started","text":"<p>Filelib.com is a platform that provides truly resumable file uploads over its REST API.</p> <p>We have created an SDK that will help you get started with your integration.</p>"},{"location":"getting_started/installation/#installation","title":"Installation","text":"<p>FilelibPy is published as a Python package and can be installed with <code>pip</code>, follow the instructions below:</p> <p>Installing with PIP</p> PIPDevelopment <pre><code>pip install filelibpy\n</code></pre> <pre><code>pip install git+https://github.com/filelib/filelib-python.git#egg=filelibpy\n</code></pre> <ol> <li>Although this will install the Filelib Python package with the latest changes,     it is not a stable version and may have breaking changes.</li> </ol> <p>This will install the package with all its dependencies.</p> <p> TODO: Add the title of YouTube video tutorial by @JustinMusti \u2013  {Duration}m \u2013 Using Filelib API with Python.</p> <p>Tip</p> <p>If you are looking for an SDK for Filelib API, check out our GitHub</p>"},{"location":"getting_started/storage_configuration/","title":"Storage Configuration","text":""},{"location":"getting_started/storage_configuration/#storage-configuration","title":"Storage Configuration","text":"<p>Storage configuration is where you tell Filelib API to place your uploaded files to.</p> <p>Filelib does not store any of the files that or parts that are being uploaded on its own server/storage.</p> <p>Each upload goes directly to your own bucket/container.</p> <p>To do that, Filelib must have access to your storage buckets/containers. </p> <p>You can give access to Filelib in your dashboard at https://filelib.com/dashboard/storage</p>"},{"location":"usage/client/","title":"Filelib Client","text":"<p>After the going through the installation process, you can start using the components within the library.</p> <p>Please ensure you acquired your API Credentials for Authentication</p>"},{"location":"usage/client/#client","title":"Client","text":""},{"location":"usage/client/#importing-client-into-scope","title":"Importing <code>Client</code> into scope:","text":"<pre><code>from filelib import Client\n</code></pre> <p>Client object will automatically try to authenticate for you. There are 3 ways you can authenticate</p> <p>Supported ways to provide Authentication Credentials</p> Configuration FileEnvironment Variable <p>Reading from a configuration file is the default when initializing <code>Client</code> The following <code>credentials_source</code>, and <code>credentials_path</code> are the default values. If you have your file at a different path, just update the <code>credentials_path</code> value to your path.</p> <p>A sample <code>~/.filelib/credentials</code> file looks like this: <pre><code>[filelib]\napi_key=filelib-uuid-api-key\napi_secret=filelib-uuid-api-secret\n</code></pre></p> <p>Now you can initialize your <code>Client</code> as such: </p> <pre><code>from filelib import Client\n\nclient = Client(\n        source=\"storage_ref\",  # storage configuration reference name.\n        prefix=\"my_dir/\"  # This will be added to the beginning of your file name during storage\n        access=\"private\"  # Depending what service you are using to store your files, you can set the visibility.\n        credentials_source=\"file\", \n        credentials_path=\"~/.filelib/credentials\"  # path the your configuration file\n)\n</code></pre> <p>If you prefer utilizing environment variables, you can set your values in your env with the following keys:</p> <pre><code>export FILELIB_API_KEY=api_key_value\n</code></pre> <pre><code>export FILELIB_API_SECRET=api_secret_value\n</code></pre> <p>Now you can initate your <code>Client</code> as follows:</p> <pre><code>from filelib import Client\n\nclient = Client(\n        source=\"storage_ref\",  # storage configuration reference name.\n        prefix=\"my_dir/\"  # This will be added to the beginning of your file name during storage\n        access=\"private\"  # Depending what service you are using to store your files, you can set the visibility.\n        credentials_source=\"env\"\n)\n</code></pre>"},{"location":"usage/client/#adding-files-for-upload","title":"Adding files for upload","text":"<p>After you initialize <code>Client</code>, now you can add files to be uploaded by chunks.</p> MinimalFull <pre><code>from filelib import Client\n\n\nclient = Client(storage=\"storage_ref\")\n# Open file\nfile = open(\"~/Downloads/birthday.mp4\", \"rb\")\nclient.add_file(file)  # this will add file to be uploaded but will not read it.\n</code></pre> <p>You can provide additional customizations for each file on how you want to handle it.    </p> <pre><code>from filelib import Client, FilelibConfig\n\n\nclient = Client(storage=\"storage_ref\")\n# Open file\nfile = open(\"~/Downloads/birthday.mp4\", \"rb\")\nconfig = FilelibConfig(storage=\"storage_ref\", prefix=\"file_prefix\", access=\"file_access\")\nclient.add_file(\n    file=file,\n    config=config  # You can pass indivual config object per each file customizing it.\n    workers = 4  # This will enable threading while chunks are being uploaded incresing speed.\n    ignore_cache=False  # This will turn off caching of file upload progress. Defaults to False.\n)\n</code></pre> <p>Warning</p> <p>Please note that if you decide to set <code>ignore_cache</code> to <code>True</code>,  the upload will not be able to resume from where it left off if it does not complete successfully.</p>"}]}